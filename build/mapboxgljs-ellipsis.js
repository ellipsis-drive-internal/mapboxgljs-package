!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("ellipsis-js-util")):"function"==typeof define&&define.amd?define(["ellipsis-js-util"],e):"object"==typeof exports?exports.MapboxgljsEllipsis=e(require("ellipsis-js-util")):t.MapboxgljsEllipsis=e(t["ellipsis-js-util"])}(self,(t=>(()=>{"use strict";var e={246:e=>{e.exports=t}},i={};function o(t){var s=i[t];if(void 0!==s)return s.exports;var r=i[t]={exports:{}};return e[t](r,r.exports,o),r.exports}o.d=(t,e)=>{for(var i in e)o.o(e,i)&&!o.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var s={};return(()=>{o.r(s),o.d(s,{AsyncEllipsisRasterLayer:()=>d,EllipsisApi:()=>u,EllipsisRasterLayer:()=>p,EllipsisVectorLayer:()=>a,default:()=>y});const t=o(246),e=e=>t?t[e]:window.EllipsisUtil[e],i=e("VectorLayerUtil"),r=e("EllipsisApi");class l extends i.EllipsisVectorLayerBase{constructor(t={}){super(t),this.sourceId=`${this.id}_source`}getSource(){return this.source}getLayers(){return this.map&&this.map.getStyle()&&this.map.getStyle().layers?this.map.getStyle().layers.filter((t=>t.id.startsWith(this.id))):[]}async addTo(t){this.map=t;let e=this.options.timestampId;const i=await r.getPath(this.options.pathId,{token:this.options.token});if(!this.options.timestampId){const t=i?.vector?.timestamps?.reverse().find((t=>!t.trashed&&!t.availability.blocked&&"active"===t.status))?.id;e=t}let o=this.options.styleId;this.options.styleId||(o=i?.vector.styles.find((t=>t.default))?.id);let s={hasTiles:!1,zoom:0};if(e){const l=i?.vector?.timestamps.find((t=>t.id===e)),a="string"==typeof o||o instanceof String?o:JSON.stringify(o);if(l.precompute.hasVectorTiles){const i=this.options.zoom&&this.options.zoom<=l.precompute.vectorTileZoom?24:l.precompute.vectorTileZoom;s={hasTiles:!0,zoom:l.precompute.vectorTileZoom,zoomFrom:i};let o=`/ogc/mvt/${this.options.pathId}/styleSheet?timestampId=${e}&style=${a}&zoom=21`;const n=await r.get(o,null,{token:this.options.token});let p=`${r.apiUrl}/ogc/mvt/${this.options.pathId}/{z}/{x}/{y}?zipTheResponse=true&style=${a}&timestampId=${e}`;this.options.token&&(p=p+"&token="+this.options.token),t.addSource(this.id+"-tiles",{type:"vector",tiles:[p],maxzoom:s.zoom});const c=n.layers;for(let e=0;e<c.length;e++){const i=c[e];let o={...i,source:this.id+"-tiles",id:this.id+"_tiles_"+i.id,minzoom:0,maxzoom:s.zoomFrom};t.addLayer(o),this.options.onFeatureClick&&(t.on("mouseenter",this.id+"_tiles_"+i.id,(()=>t.getCanvas().style.cursor="pointer")),t.on("mouseleave",this.id+"_tiles_"+i.id,(()=>t.getCanvas().style.cursor="default")))}}}return t.addSource(this.sourceId,{type:"geojson",data:{type:"FeatureCollection",features:[]}}),t.addLayer({id:`${this.id}_fill`,type:"fill",interactive:!!this.options.onFeatureClick,source:this.sourceId,layout:{},minzoom:s.zoomFrom,paint:{"fill-color":["get","fillColor",["get","compiledStyle"]],"fill-opacity":["get","fillOpacity",["get","compiledStyle"]]},filter:["any",["==","$type","Polygon"]]}),t.addLayer({id:`${this.id}_outline`,type:"line",minzoom:s.zoomFrom,interactive:!!this.options.onFeatureClick,source:this.sourceId,layout:{},paint:{"line-color":["get","borderColor",["get","compiledStyle"]],"line-opacity":["get","borderOpacity",["get","compiledStyle"]],"line-width":["get","width",["get","compiledStyle"]]},filter:["any",["==","$type","Polygon"],["==","$type","LineString"]]}),t.addLayer({id:`${this.id}_points`,type:"circle",minzoom:s.zoomFrom,interactive:!!this.options.onFeatureClick,source:this.sourceId,layout:{"circle-sort-key":["get","sortIndex",["get","compiledStyle"]]},paint:{"circle-radius":["get","radius",["get","compiledStyle"]],"circle-color":["get","fillColor",["get","compiledStyle"]],"circle-opacity":["get","fillOpacity",["get","compiledStyle"]],"circle-stroke-color":["get","borderColor",["get","compiledStyle"]],"circle-stroke-opacity":["get","borderOpacity",["get","compiledStyle"]],"circle-stroke-width":["get","width",["get","compiledStyle"]]},filter:["any",["==","$type","Point"]]}),this.options.onFeatureClick&&(this.getLayers().forEach((e=>{t.on("click",e.id,(t=>this.options.onFeatureClick({geometry:t.features[0].geometry,properties:t.features[0].properties},e)))})),t.on("mouseenter",`${this.id}_fill`,(()=>t.getCanvas().style.cursor="pointer")),t.on("mouseleave",`${this.id}_fill`,(()=>t.getCanvas().style.cursor="default")),t.on("mouseenter",`${this.id}_points`,(()=>t.getCanvas().style.cursor="pointer")),t.on("mouseleave",`${this.id}_points`,(()=>t.getCanvas().style.cursor="default")),t.on("mouseenter",`${this.id}_outline`,(()=>t.getCanvas().style.cursor="pointer")),t.on("mouseleave",`${this.id}_outline`,(()=>t.getCanvas().style.cursor="default"))),this.source=t.getSource(this.sourceId),this.update(),this.options.loadAll||(t.on("zoom",(t=>{this.update()})),t.on("moveend",(t=>{this.update()}))),this}updateView=()=>{const t=this.getFeatures();t&&t.length&&this.getSource().setData({type:"FeatureCollection",features:t})};getMapBounds=()=>{if(!this.map)return;const t=this.map.getBounds(),e=this.map.getZoom();return{bounds:{xMin:t.getWest(),xMax:t.getEast(),yMin:t.getSouth(),yMax:t.getNorth()},zoom:parseInt(e+1,10)}}}const a=l,n=e("RasterLayerUtil"),p=class{constructor(t){t.url?this.url=t.url:this.url=n.getSlippyMapUrl(t),t.id?this.id=t.id:this.id=n.getLayerId(t),this.options=t,console.log(this)}addTo(t){return this.source=`${this.id}_source`,t.addSource(this.source,{type:"raster",tiles:[this.url],tileSize:256}),t.addLayer({id:this.id,type:"raster",source:`${this.id}_source`,maxZoom:this.options.zoom}),this}},c=e("RasterLayerUtil"),d=async t=>{let e=await c.getSlippyMapUrlWithDefaults(t);return new p(e)},u=e("EllipsisApi"),y={RasterLayer:t=>new p(t),VectorLayer:t=>new a(t),AsyncEllipsisRasterLayer:async t=>await d(t),EllipsisApi:u}})(),s})()));