!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.mapboxgljsEllipsis=e():t.mapboxgljsEllipsis=e()}(self,(function(){return(()=>{"use strict";var t={d:(e,i)=>{for(var s in i)t.o(i,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:i[s]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},i={};t.r(i),t.d(i,{default:()=>n});const s="https://api.ellipsis-drive.com/v1";function a(t,e){var i=Error.call(this,e);this.name="API Error",this.message=i.message,this.stack=i.stack,this.status=t}async function o(t,e,i,o){let r={},n="";r["Content-Type"]="application/json",o&&(r.Authorization=`Bearer ${o.token}`,o.mapId&&(n=`?mapId=${o.mapId}`)),e=`${s}${e}${n}`;let l=null,h=!1,c=!1,u={method:t,headers:r};return i&&(u.body=JSON.stringify(i)),await fetch(e,u).then((t=>{t.ok||429===t.status&&alert("You made too many calls to this map and won't be able to use it for another minute. Contact the owner of this map to give you more bandwidth."),l=t;let e=t.headers.get("Content-Type");return e?(h=e.includes("text"),c=e.includes("application/json")):h=!0,c?t.json():h?t.text():t.blob()})).then((t=>{if(200===l.status)return t;throw new a(l.status,h?t:t.message)}))}const r={apiUrl:s,post:(t,e,i)=>o("POST",t,e,i),login:(t,e)=>o("POST","/account/login",{username:t,password:e}),getMetadata:(t,e,i)=>{let s;return s=e?{mapId:t,includeDeleted:e}:{mapId:t},o("POST","/metadata",s,i)}},n={EllipsisApi:r,RasterLayer:(t,e,i,s=21,a={})=>new class{constructor(t,e,i,s=18,a){this.id=`${t}_${e}_${i}`,this.source=`${this.id}_source`,this.type="raster",this.url=`${r.apiUrl}/tileService/${t}/${e}/${i}/{z}/{x}/{y}`,a&&(url+="?token="+a)}addTo(t){return t.addSource(this.source,{type:"raster",tiles:[this.url],tileSize:128}),t.addLayer(this),this}}(t,e,i,s,a.token),VectorLayer:(t,i,s={})=>new class{constructor(t,e,i,s,a,o,r,n,l,h,c,u,d,p,g,m,y){this.id=`${t}_${e}`,this.sourceId=`${this.id}_source`,this.blockId=t,this.layerId=e,this.maxZoom=l,this.onFeatureClick=i,this.token=s,this.styleId=a,this.style=o,this.filter=r,this.centerPoints=n,this.pageSize=Math.min(h,3e3),this.maxMbPerTile=c,this.maxTilesInCache=u,this.maxFeaturesPerTile=d,this.radius=p,this.lineWidth=g,this.useMarkers=m,this.loadAll=y,this.tiles=[],this.cache=[],this.markers=[],this.zoom=1,this.changed=!1}getSource(){return this.source}getLayers(){return this.map&&this.map.getStyle()&&this.map.getStyle().layers?this.map.getStyle().layers.filter((t=>t.id.startsWith(this.id))):[]}addTo(t){return this.map=t,t.addSource(this.sourceId,{type:"geojson",data:{type:"FeatureCollection",features:[]}}),t.addLayer({id:`${this.id}_fill`,type:"fill",interactive:!!this.onFeatureClick,source:this.sourceId,layout:{},paint:{"fill-color":["get","color"],"fill-opacity":["get","fillOpacity"]},filter:["any",["==","$type","Polygon"]]}),t.addLayer({id:`${this.id}_outline`,type:"line",interactive:!!this.onFeatureClick,source:this.sourceId,layout:{},paint:{"line-color":["get","color"],"line-width":["get","weight"]},filter:["any",["==","$type","Polygon"],["==","$type","LineString"]]}),this.useMarkers||t.addLayer({id:`${this.id}_points`,type:"circle",interactive:!!this.onFeatureClick,source:this.sourceId,layout:{},paint:{"circle-radius":["get","radius"],"circle-color":["get","color"]},filter:["any",["==","$type","Point"]]}),this.onFeatureClick&&(this.getLayers().forEach((e=>{t.on("click",e.id,(t=>this.onFeatureClick({geometry:t.features[0].geometry,properties:t.features[0].properties},e)))})),t.on("mouseenter",`${this.id}_fill`,(()=>t.getCanvas().style.cursor="pointer")),t.on("mouseleave",`${this.id}_fill`,(()=>t.getCanvas().style.cursor="")),t.on("mouseenter",`${this.id}_points`,(()=>t.getCanvas().style.cursor="pointer")),t.on("mouseleave",`${this.id}_points`,(()=>t.getCanvas().style.cursor=""))),this.source=t.getSource(this.sourceId),this.handleViewportUpdate(),this.loadAll||(t.on("zoom",(t=>{this.handleViewportUpdate()})),t.on("moveend",(t=>{this.handleViewportUpdate()}))),this}handleViewportUpdate=()=>{const t=this.getMapBounds();t&&(this.zoom=Math.max(Math.min(this.maxZoom,t.zoom-2),0),this.tiles=this.boundsToTiles(t.bounds,this.zoom),this.gettingVectorsInterval||(this.gettingVectorsInterval=setInterval((async()=>{if(!this.isLoading)return await this.loadStep()?void this.updateView():(clearInterval(this.gettingVectorsInterval),void(this.gettingVectorsInterval=void 0))}),100)))};updateView=()=>{if(!this.tiles||0===this.tiles.length)return;let t;if(t=this.loadAll?this.cache:this.tiles.flatMap((t=>{const e=this.cache[this.getTileId(t)];return e?e.elements:[]})),this.useMarkers){let e=t.flatMap((t=>"Point"===t.geometry.type?new mapboxgl.Marker({color:t.properties.color}).setLngLat(t.geometry.coordinates):"MultiPoint"===t.geometry.type?t.geometry.coordinates.map((e=>new mapboxgl.Marker({color:t.properties.color}).setLngLat(e))):[]));this.markers.forEach((t=>t.remove())),e.forEach((t=>{this.onFeatureClick&&t.getElement().addEventListener("click",this.onFeatureClick),t.addTo(this.map),this.markers.push(t)}))}console.log(t),this.getSource().setData({type:"FeatureCollection",features:t})};loadStep=async()=>{if(this.isLoading=!0,this.loadAll){const t=await this.getAndCacheAllGeoJsons();return this.isLoading=!1,t}this.ensureMaxCacheSize();const t=await this.getAndCacheGeoJsons();return this.isLoading=!1,t};ensureMaxCacheSize=()=>{const t=Object.keys(this.cache);if(t.length>this.maxTilesInCache){const e=t.map((t=>this.cache[t].date)).sort()[9];t.forEach((t=>{this.cache[t].date<=e&&delete this.cache[t]}))}};getAndCacheAllGeoJsons=async()=>{if(4===this.nextPageStart)return!1;const t={pageStart:this.nextPageStart,mapId:this.blockId,returnType:this.centerPoints?"center":"geometry",layerId:this.layerId,zip:!0,pageSize:Math.min(3e3,this.pageSize),styleId:this.styleId,style:this.style};try{const e=await r.post("/geometry/get",t,{token:this.token});this.nextPageStart=e.nextPageStart,e.nextPageStart||(this.nextPageStart=4),e.result&&e.result.features&&e.result.features.forEach((t=>{this.styleGeoJson(t,this.lineWidth,this.radius),this.cache.push(t)}))}catch(t){return console.error("an error occured with getting all geometry"),console.log(t),!1}return!0};getAndCacheGeoJsons=async()=>{const t=Date.now(),i=this.tiles.map((t=>{const e=this.getTileId(t);if(!this.cache[e])return{tileId:t};const i=this.cache[e].nextPageStart;return i&&this.cache[e].amount<=this.maxFeaturesPerTile&&this.cache[e].size<=this.maxMbPerTile?{tileId:t,pageStart:i}:null})).filter((t=>t));if(0===i.length)return!1;const s={mapId:this.blockId,returnType:this.centerPoints?"center":"geometry",layerId:this.layerId,zip:!0,pageSize:Math.min(3e3,this.pageSize),styleId:this.styleId,style:this.style,propertyFilter:this.filter&&this.filter>0?this.filter:null};let a=[];for(let t=0;t<i.length;t+=10){s.tiles=i.slice(t,t+10);try{const t=await r.post("/geometry/tile",s,{token:this.token});a=a.concat(t)}catch{return console.error("an error occured with getting tile geometry"),console.log(e),!1}}for(let e=0;e<i.length;e++){const s=this.getTileId(i[e].tileId);this.cache[s]||(this.cache[s]={size:0,amount:0,elements:[],nextPageStart:null});const o=this.cache[s];o.date=t,o.size=o.size+a[e].size,o.amount=o.amount+a[e].result.features.length,o.nextPageStart=a[e].nextPageStart,a[e].result.features.forEach((t=>this.styleGeoJson(t,this.lineWidth,this.radius))),o.elements=o.elements.concat(a[e].result.features)}return!0};getTileId=t=>`${t.zoom}_${t.tileX}_${t.tileY}`;styleGeoJson=(t,e,i)=>{if(!(t&&t.geometry&&t.geometry.type&&t.properties))return;const s=t.geometry.type,a=t.properties,o=a.color;/^#?([A-Fa-f0-9]{2}){3,4}$/.test(o)&&9===o.length?(a.fillOpacity=parseInt(o.substring(8,10),16)/25.5,a.color=o.substring(0,7)):(a.fillOpacity=.6,a.color=o),s.endsWith("Point")?(a.radius=i,a.weight=2):a.weight=e};boundsToTiles=(t,e)=>{const i=Math.max(t.xMin,-180),s=Math.min(t.xMax,180),a=Math.max(t.yMin,-85),o=Math.min(t.yMax,85),r=Math.pow(2,e),n=r/360,l=Math.PI,h=2*l,c=l/4,u=Math.floor((i+180)*n),d=Math.floor((s+180)*n),p=Math.floor(r/h*(l-Math.log(Math.tan(c+o/360*l)))),g=Math.floor(r/h*(l-Math.log(Math.tan(c+a/360*l))));let m=[];for(let t=Math.max(0,u-1);t<=Math.min(2**e-1,d+1);t++)for(let i=Math.max(0,p-1);i<=Math.min(2**e-1,g+1);i++)m.push({zoom:e,tileX:t,tileY:i});return m};getMapBounds=()=>{if(!this.map)return;const t=this.map.getBounds(),e=this.map.getZoom();return{bounds:{xMin:t.getWest(),xMax:t.getEast(),yMin:t.getSouth(),yMax:t.getNorth()},zoom:parseInt(e+1,10)}}}(t,i,s.onFeatureClick,s.token,s.styleId,s.style,s.filter,!!s.centerPoints,s.maxZoom?s.maxZoom:21,s.pageSize?Math.max(3e3,s.pageSize):25,s.maxMbPerTile?1e6*s.maxMbPerTile:16e6,s.maxTilesInCache?s.maxTilesInCache:500,s.maxFeaturesPerTile?s.maxFeaturesPerTile:200,s.radius?s.radius:15,s.lineWidth?s.lineWidth:2,!!s.useMarkers,!!s.loadAll)};return i})()}));